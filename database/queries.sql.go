// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package database

import (
	"context"
)

const install = `-- name: Install :exec
INSERT INTO installed_paks (display_name, name, version, type, can_uninstall)
VALUES (?, ?, ?, ?, ?)
`

type InstallParams struct {
	DisplayName  string
	Name         string
	Version      string
	Type         string
	CanUninstall int64
}

func (q *Queries) Install(ctx context.Context, arg InstallParams) error {
	_, err := q.db.ExecContext(ctx, install,
		arg.DisplayName,
		arg.Name,
		arg.Version,
		arg.Type,
		arg.CanUninstall,
	)
	return err
}

const listInstalledPaks = `-- name: ListInstalledPaks :many
SELECT name, display_name, type, version, can_uninstall
FROM installed_paks
ORDER BY name
`

func (q *Queries) ListInstalledPaks(ctx context.Context) ([]InstalledPak, error) {
	rows, err := q.db.QueryContext(ctx, listInstalledPaks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InstalledPak
	for rows.Next() {
		var i InstalledPak
		if err := rows.Scan(
			&i.Name,
			&i.DisplayName,
			&i.Type,
			&i.Version,
			&i.CanUninstall,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const uninstall = `-- name: Uninstall :exec
DELETE
FROM installed_paks
WHERE name = ?
`

func (q *Queries) Uninstall(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, uninstall, name)
	return err
}

const updateVersion = `-- name: UpdateVersion :exec
UPDATE installed_paks
SET version = ?
WHERE name = ?
`

type UpdateVersionParams struct {
	Version string
	Name    string
}

func (q *Queries) UpdateVersion(ctx context.Context, arg UpdateVersionParams) error {
	_, err := q.db.ExecContext(ctx, updateVersion, arg.Version, arg.Name)
	return err
}
